Вырезано из https://www.coursera.org/learn/mathematics-and-python/lecture/VXRfy/chto-takoie-python-i-pochiemu-my-vybrali-imienno-iegho 

Video Player is loading. 

Play Video 

Loaded: 0% 

0:27 

Progress: 0% 

Current Time 0:27 

/ 

Duration 6:46 

Субтитры 

Отключить субтитры 

Русский 

Качество видео 

Среднее 

Скорость воспроизведения 

1.00x 

Автозапуск 

This is a modal window. 

Beginning of dialog window. Escape will cancel and close the window. 

TextColorTransparencyBackgroundColorTransparencyWindowColorTransparency 

Font SizeText Edge StyleFont Family 

End of dialog window. 

Не удалось отправить. Повторите попытку.Пропустить 

В этом видео мы начнем знакомиться с языком Python.  

Python был задуман еще в 80-х годах.  

Его автором является Гвидо ван Россум,  

работавший тогда в центре математики и информатики в Нидерландах.  

Гвидо до сих пор принимает активное участие в жизни языка.  

У него даже есть особое звание — «великодушный пожизненный диктатор».  

Это особый термин, означающий создателя или главу некоторого проекта,  

который до сих пор принимает активное участие в его развитии.  

Существует 3 версии языка: Python1, Python2 и Python3.  

На сегодняшний день наиболее популярными являются последние 2 версии — Python2 и  

Python3.  

Обе эти ветки поддерживаются, однако между ними нет обратной совместимости.  

Мы с вами будем работать со второй версией.  

Это означает, что весь код, который мы будем писать,  

будет написан под Python 2.7.  

Однако, если вам Python понравится,  

вы можете самостоятельно изучить также 3-ю версию.  

Под нее уже портированы и работают практически все популярные библиотеки,  

поэтому пробуйте, вам должно быть легко.  

Теперь пара слов о лицензии.  

Python распространяется свободно.  

Практически все его версии попадают под действие Python Software Foundation  

license.  

Это означает, что они имеют открытый исходный код,  

а также могут быть использованы не только для личных или учебных целей,  

но и для создания коммерческих продуктов.  

Это здорово.  

Python портирован и работает практически под все известные операционные системы.  

Это означает, в частности, что он работает под Microsoft Windows,  

практически под всё семейство UNIX, под Mac OS и Mac OS X.  

Более того, Python работает даже с такими операционными системами,  

как iOS, Android или Windows Mobile.  

Одно из ключевых свойств Python — это его простота.  

Python имеет простой и лаконичный синтаксис, поэтому под него легко начать  

писать программы, даже если у вас нет опыта программирования.  

Более того, интуитивный синтаксис Python позволяет легко находить ошибки в вашем  

коде, а также быстро читать и понимать чужой код — это очень важно.  

У Python есть два режима запуска: это стандартный режим и интерактивный режим.  

Если мы работаем в стандартном режиме, то нам сначала нужно создать файл с кодом,  

сохранить его нужно с расширением .py, после чего этот файл нужно подать на вход  

интерпретатору, так как Python — интерпретируемый язык.  

Упрощенно это можно понимать следующим образом: у нас отсутствует этап компиляции  

кода, но при этом интерпретатор анализирует наш код построчно или  

покомандно и сразу же эти команды выполняет.  

Фактически, если в какой-то команде происходит ошибка,  

то в этом месте выполнение прекращается, и мы получаем сообщение об ошибке.  

В интерактивном режиме всё устроено несколько иначе.  

Мы запускаем Python в интерактивном режиме,  

после чего имеем возможность подавать ему на вход различные команды.  

При этом результат работы команд мы видим сразу.  

Более того, если где-то произошла ошибка, выполнение не прекращается,  

мы просто получаем сообщение об ошибке и можем экспериментировать дальше.  

Это очень удобно, когда мы только изучаем язык.  

Мы с вами часто будем работать в этом режиме.  

Кстати, многие любят использовать интерактивный Python как  

онлайн-калькулятор.  

Действительно, это удобно.  

Вы можете использовать не только простые арифметические операции,  

такие как сложение или вычитание, но и что-то более интересное.  

Например, можно использовать тригонометрию, логарифмы, факториалы.  

Вам просто нужно импортировать эти функции из соответствующих библиотек.  

Теперь давайте поговорим об эффективности.  

Часто программы, написанные на интерпретируемых языках программирования,  

работают несколько дольше, чем их аналоги, написанные на компилируемых языках.  

В частности, для ряда задач время выполнения программы может быть дольше.  

С другой стороны, мы обсудили целый ряд свойств Python,  

которые позволяют сделать разработку программ на нем довольно эффективной.  

Это значит, что не так много времени проходит с момента написания программы до  

момента ее корректной работы.  

Как же нам быть?  

Нам хочется, с одной стороны, экономить время, требуемое на разработку программы,  

с другой стороны, нам хочется, чтобы наши программы работали эффективно.  

Давайте подойдем к этому вопросу с практической точки зрения.  

Предположим, что мы решаем некоторую сложную задачу.  

Например, решаем задачу кредитного скоринга,  

где нам нужно оценить кредитоспособность некоторого клиента.  

Эта задача сложная, потому что информация о клиенте может быть сколь угодно сложна  

или разнородна, а нам с вами нужно придумать, как правильно ее обрабатывать,  

как правильно рассчитать целевую функцию, как правильно построить модель.  

Все эти шаги сложны логически, поэтому нам хочется больше внимания уделить логике  

работы нашей программы, а не синтаксису.  

Давайте напишем всё это на простом языке.  

Дальше возможны два варианта: либо программа сразу будет  

работать настолько быстро, что нам не захочется ничего менять,  

либо какие-то части будут работать медленно.  

Если что-то будет работать недостаточно эффективно,  

давайте перепишем это на быстром языке.  

Скорее всего, это будут какие-то стандартные части кода,  

например разложение матриц.  

Тогда мы можем переписать это на быстром языке, более того,  

эта часть будет стандартной, то есть мы напишем ее один раз,  

а дальше нам не придется часто читать этот код.  

И тогда мы будем использовать этот код в тех местах,  

где нам захочется работу несколько ускорить.  

Есть мнение, что 80 % знания языка — это знание его библиотек.  

С этой точки зрения Python очень интересен, потому что он содержит огромное  

количество разнообразных модулей в своей стандартной библиотеке.  

Например, это модуль codecs для работы с текстом в различных кодировках или  

модуль re для работы с регулярными выражениями.  

С другой стороны,  

Python содержит широкий набор внешних библиотек для решения разнообразных задач.  

Это может быть библиотека matplotlib для построения графиков или библиотека pandas  

для работы с данными в виде таблиц.  

Напоследок хотелось бы сказать несколько слов о философии Python.  

Если вы наберете команду >> import this,  

вы увидите так называемый «Дзен Python».  

Он будет на английском языке.  

Я вам расскажу несколько наиболее интересных утверждений.  

«Красивое лучше, чем уродливое.  

Простое лучше, чем сложное.  

Читаемость важна».  

Всё это говорит о том, что Python задумывался как простой, лаконичный язык,  

читать и писать программы на котором должно быть легко.  

«Если реализацию сложно объяснить — значит, идея точно плоха.  

Если же реализацию объяснить легко — значит, идея, возможно, хороша».  

Всё это говорит о том, что архитектура ваших программ важна.  

Ее следует продумывать заранее и пытаться строить таким образом,  

чтобы ваши программы были интуитивно понятны.  

В конце давайте все-таки ответим на вопрос, почему же мы выбрали именно  

Python в качестве основного языка для нашего курса и специализации.  

Во-первых, Python свободно распространяется и  

работает практически на всех известных платформах.  

Python прост для изучения и обладает такими важными свойствами,  

как интерактивность и интерпретируемость.  

Богатый набор функций стандартной библиотеки и широкий набор внешних  

библиотек позволяют нам решать практически любые задачи,  

а также вокруг Python сложилось большое сообщество разработчиков, что очень важно,  

потому что они разрабатывают новые библиотеки,  

а также помогают новичкам разобраться с кодом.  

Наверняка вам уже не терпится установить Python и начать с ним работать.  

Смотрите следующее видео, в нем даны все инструкции по установке.  
